class Stack:
    def __init__(self):
        self.__my_stack = []
        self.__nums_task = 0

    def push(self, obj):
        self.__my_stack.append(obj)
        print("{} - –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–µ–∫".format(str(obj)))

    def pop(self):
        obj = self.__my_stack.pop()
        print("{} - —É–¥–∞–ª–µ–Ω".format(obj))

    def sort(self):
        return self.__my_stack.sort(key=lambda x: x[0])  # –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É(–ø–µ—Ä–≤–æ–º—É –∑–Ω–∞–∫—É)

    def get_obj(self):
        return self.__my_stack


class TaskManager:
    def __init__(self):
        self.__task_stack = Stack()

    def new_task(self, task, priority):
        __my_task = "{} {}".format(
            priority, task
        )
        self.__task_stack.push(__my_task)
        self.__task_stack.sort()

    def __call__(self):
        ret_str = str(self.__task_stack.get_obj())
        return ret_str[1:-1]


manager = TaskManager()
manager.new_task("—Å–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É", 4)
manager.new_task("–ø–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", 4)
manager.new_task("–æ—Ç–¥–æ—Ö–Ω—É—Ç—å", 1)
manager.new_task("—Å–¥–∞—Ç—å –¥–∑", 2)
manager.new_task("–ø–æ–µ—Å—Ç—å", 2)

print(manager())

# –∑–∞—á—ë—Ç! üöÄ
